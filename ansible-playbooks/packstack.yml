---
# packstack allinone ansible file
- hosts: 127.0.0.1
  connection: local
  tasks:
   - name: waiting for server to come back
     local_action: wait_for host=$HOSTNAME state=started delay=10 timeout=20
     sudo: false
   - name: Install OpenStack Controller with ansible
     shell: "touch /root/.ansible_{ifcfg-eth0,ifcfg-br-ex,systemd-network-restart,stackconfig} && rm -fr /root/.ssh/ && packstack --allinone --provision-demo=n --os-neutron-ovs-bridge-mappings=provider:br-ex --os-neutron-ovs-bridge-interfaces=br-ex:eth0 --os-neutron-ml2-type-drivers=vxlan,flat && touch /root/.packstack-done && rm -fr /root/.ansible_*"
     args:
       creates: /root/.packstack-done
   - name: Pass Network Configuration eth0  
     shell: |
       cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
       DEVICE=eth0
       ONBOOT=yes
       TYPE=OVSPort
       DEVICETYPE=ovs
       OVS_BRIDGE=br-ex
     args:
       creates: /root/.ansible_ifcfg-eth0
   - name: creating .ansible_ifcfg-eth0
     shell: "touch /root/.ansible_ifcfg-eth0"
     args:
       creates: /root/.ansible_ifcfg-eth0
   - name: Pass Network Configuration br-ex
     shell: |
       cat > /etc/sysconfig/network-scripts/ifcfg-br-ex << EOF
       DEVICE=br-ex
       OVSBOOTPROTO=dhcp
       OVSDHCPINTERFACES=eth0
       ONBOOT=yes
       TYPE=OVSBridge
       DEVICETYPE=ovs
       USERCTL=yes
       PEERDNS=yes
       MACADDR=$MAC
       OVS_EXTRA="set bridge br-ex other-config:hwaddr=$MACADDR"
       IPV6INIT=no
       IPADDR=$IP
       NETMASK=255.255.255.0
       GATEWAY=192.168.0.254
       DNS1=192.168.0.1
     args:
       creates: /root/.ansible_ifcfg-br-ex
   - name: create /root/.ansible_ifcfg-br-ex
     shell: "touch /root/.ansible_ifcfg-br-ex"
     args:
       creates: /root/.ansible_ifcfg-br-ex
   - name: Restart Network Service
     shell: "systemctl restart network.service"
     args:
       creates: /root/.ansible_systemd-network-restart
   - name: create /root/.ansible_systemd-network-restart
     shell: "touch /root/.ansible_systemd-network-restart"
     args:
       creates: /root/.ansible_systemd-network-restart
   - name: Create networks / subnets / sec rules / nova boot
     shell: " source ~/keystonerc_admin ; neutron net-create external_network --provider:network_type flat --provider:physical_network provider --router:external ; neutron subnet-create --allocation-pool start=192.168.0.130,end=192.168.0.140 --ip-version 4 --gateway 192.168.0.254 --host-route destination=0.0.0.0/0,nexthop=192.168.0.254 --enable-dhcp --name provider-101 --dns-nameserver 8.8.8.8 external_network 192.168.0.0/24 ; wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img && glance image-create --name cirros --disk-format qcow2 --container-format bare --visibility public --file /root/cirros-0.3.4-x86_64-disk.img ; nova secgroup-create all 'Allow all tcp ports' ; nova secgroup-add-rule all TCP 1 65535 0.0.0.0/0 ; nova secgroup-create base 'Allow Base Access' ; nova secgroup-add-rule base TCP 22 22 0.0.0.0/0 ; nova secgroup-add-rule base TCP 80 80 0.0.0.0/0 ; nova secgroup-add-rule base ICMP -1 -1 0.0.0.0/0 && nova keypair-add --pub_key ~/.ssh/id_rsa.pub local && sed -i 's/enable_isolated_metadata = False/enable_isolated_metadata = True/' /etc/neutron/dhcp_agent.ini ; openstack-service list|grep agent|xargs systemctl restart && nova boot --flavor 1 --image cirros --key-name local --security-groups default,base,all mycirros "
     args:
       creates: /root/.ansible_stackconfig
   - name: Create networks / subnets / sec rules / nova boot
     shell: "touch /root/.ansible_stackconfig"
     args:
       creates: /root/.ansible_stackconfig
