---
# packstack allinone ansible file
- hosts: 127.0.0.1
  connection: local
  tasks:
   - name: waiting for server to come back
     local_action: wait_for host=$HOSTNAME state=started delay=10 timeout=20
     sudo: false
   - name: Install OpenStack Controller with ansible
     shell: "touch /root/.ansible_{ifcfg-eth0,ifcfg-br-ex,systemd-network-restart} && rm -fr /root/.ssh/ && packstack --allinone --provision-demo=n --os-neutron-ovs-bridge-mappings=provider:br-ex --os-neutron-ovs-bridge-interfaces=br-ex:eth0 --os-neutron-ml2-type-drivers=vxlan,flat && touch /root/.packstack-done && rm -fr /root/.ansible_*"
     args:
       creates: /root/.packstack-done
   - name: Pass Network Configuration eth0  
     shell: |
       cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
       DEVICE=eth0
       ONBOOT=yes
       TYPE=OVSPort
       DEVICETYPE=ovs
       OVS_BRIDGE=br-ex
     args:
       creates: /root/.ansible_ifcfg-eth0
   - name: creating .ansible_ifcfg-eth0
     shell: "touch /root/.ansible_ifcfg-eth0"
     args:
       creates: /root/.ansible_ifcfg-eth0
   - name: Pass Network Configuration br-ex
     shell: |
       cat > /etc/sysconfig/network-scripts/ifcfg-br-ex << EOF
       DEVICE=br-ex
       BOOTPROTO=static
       ONBOOT=yes
       TYPE=OVSBridge
       DEVICETYPE=ovs
       USERCTL=yes
       PEERDNS=yes
       IPV6INIT=no
       IPADDR=$IP
       NETMASK=255.255.255.0
       GATEWAY=192.168.0.254
       DNS1=192.168.0.1
     args:
       creates: /root/.ansible_ifcfg-br-ex
   - name: create /root/.ansible_ifcfg-br-ex
     shell: "touch /root/.ansible_ifcfg-br-ex"
     args:
       creates: /root/.ansible_ifcfg-br-ex
   - name: Restart Network Service
     shell: "systemctl restart network.service"
     args:
       creates: /root/.ansible_systemd-network-restart
   - name: create /root/.ansible_systemd-network-restart
     shell: "touch /root/.ansible_systemd-network-restart"
     args:
       creates: /root/.ansible_systemd-network-restart
