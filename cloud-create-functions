#!/bin/bash

### CLOUD_CREATE_SCHEDULER
### Specific to Foreman 1.12 and oVirt 4.0.x currently utilizing hammer in STAGE 1 and ansible in STAGE 2 to automate the steps for an all-in-one OpenStack Liberty deployment. Sublevel customization can be done in Foreman hostgroup assignments and defined as different functions that the scheduler can take advantage of. Future plans to include CONTROLLER, NETWORKNODE, COMPUTENODE(S) for non-ha deployment configurations for Red Hat OSP versions 5-9 and incorporation ha director deployments in the near future[1].
### This is done using Foreman hammer API calls ontop of oVirt via API (v3) intergrated and executed on the Foreman in a bash shell session. Ansible is called from the Foreman server and the remote playbook is trigger allowing ansible to continue provisioning. Given we satisfy an ansible configuration in STAGE 1, any ansible configurations should be able to be used in this scheduler during STAGE 2 -work will be required to intergrate each new ansible configuration for STAGE1 builds which are hostgroups in Foreman and compute-profiles tied to templates in oVirt.

##
### current State: Limited Functionality

##
### arguments

X=$1

##
### main controller create function which creates a vm with `--hostgroup-id=2` (foreman) using compute resource `--compute-resource-id=1` (oVirt) 

__controller() {
r=`rm -fr /root/1`
for x in "$X"; do $r; hammer host create --hostgroup-id=2 --name="$x" --compute-resource-id=1 --compute-attributes="start=1" --interface="name=eth0,network=provisioning" >1 >/root/1 ; done &
PID=$!
i=1
process=`ls -fl /proc/$PID/exe|awk '{print $9,$10,$11}'`
sp="-\|/"
echo -ne '\n'
while [ -d /proc/$PID ]
do
  sleep 1; printf "\b${sp:i++%${#sp}:1}"
done
}

##
### controller label function

__controller_label () {
datestart=`date +%H:%M:%S`
echo -e "TASK [STAGE 1 building] ********************************************************"
echo -e "\033[00;32mok: [$X > provisioning]\033[0m"
echo -e ""
echo -e "TASK [STARTED $datestart] ********************************************************"
echo -n ' '
}

##
### foreman finished creating host label function

__finished_label() {
c=`cat /root/1`
echo -e "\033[00;32mok: [$c $X > now building]\033[0m"
echo -e ""
}

###
### add an entry to ansible host file for handoff[1]

__host() {
echo $X.irondung.net >> /etc/ansible/hosts
}

##
### ansible-playbook function

__playbook_create() {
cat >/etc/ansible/$X-packstack.yml<< EOF
---

- hosts: $X.irondung.net
  remote_user: root
  connection: local
  tasks:
   - name: STAGE 1 Ansible polling build status
     local_action: wait_for path=/var/log/foreman/production.log search_regex="$X.irondung.net is Built" delay=5 timeout=900
     become: sudo

   - name: STAGE 1 Ansible polling reboot status
     local_action: wait_for port=22 host="$X.irondung.net" state=started search_regex=OpenSSH delay=35 timeout=60
     become: sudo

   - name: STAGE 2 Ansible configuring Red Hat OSP-8 all-in-one node
     shell: " sshpass -p$SSHPASS ssh-copy-id -o StrictHostKeyChecking=no root$X.irondung.net ; ssh -o StrictHostKeyChecking=no root@$X.irondung.net 'sh /root/ansible.sh' 2>/dev/null "
     args:
       creates: /etc/ansible/.packstack-2-$X
EOF
}

##
### start ansible function

__ansible_start() {
echo -e "TASK [Handing over to ansible at $datestart] ****************************************"
echo -e "\033[00;32mok: [$X.irondung.net > remote ansible]\033[0m"
ansible-playbook -s /etc/ansible/$X-packstack.yml &
PID=$!
i=1
sp="-\|/"
process=`ls -fl /proc/$PID/exe|awk '{print $9,$10,$11}'`
echo -ne '\n'
while [ -d /proc/$PID ]
do
  sleep 1; printf "\b${sp:i++%${#sp}:1}"
done
}

##
### sleep 10 function 

__sleep_() {
sleep 10 &
PID=$!
i=1
sp="-\|/"
process=`ls -fl /proc/$PID/exe|awk '{print $9,$10,$11}'`
echo -ne '\n'
while [ -d /proc/$PID ]
do
  sleep 1; printf "\b${sp:i++%${#sp}:1}"
done
}

##
### Final steps

__exit_() {
echo -e "TASK [STAGE 2 COMPLETE] **************************************************************"
echo -e "\033[00;32mok: [$X > deployed]\033[0m"
echo -e ""
echo -e "TASK [FINISHED TAKE ACTION] **********************************************************"
echo -e "\033[00;32mok: [password: $SSHPASS]  ssh root@$X.irondung.net\033[0m"
echo -e ""
exit $?
}

##
### main
reset && sleep 1
__controller_label && __controller
__sleep_ && __finished_label
__host && __playbook_create && __ansible_start && __exit_
